/* Reset básico */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, sans-serif;
  padding: 20px;
  background-color: #f5f5f5;
}

h1 {
  text-align: center;
  margin-bottom: 30px;
  color: #333;
}

.ejercicio {
  background-color: white;
  padding: 20px;
  margin-bottom: 30px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.ejercicio h2 {
  margin-bottom: 15px;
  color: #004466;
  font-size: 18px;
}

.item {
  background-color: #4a90e2;
  color: white;
  padding: 20px;
  text-align: center;
  font-weight: bold;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.info {
  margin-top: 10px;
  font-size: 14px;
  color: #666;
  font-style: italic;
}


/* ========================================
   EJERCICIO 1: Grid básico
   - display: grid activa el grid
   - grid-template-columns define el número y tamaño de columnas
   - 3 columnas de igual tamaño (1fr cada una)
   ======================================== */
.grid-basico {
  display: grid; /* Activa CSS Grid */
  grid-template-columns: 1fr 1fr 1fr; /* 3 columnas iguales */
  gap: 10px; /* Separación entre celdas */
}


/* ========================================
   EJERCICIO 2: Fracciones (fr)
   - fr = fracción del espacio disponible
   - 1fr 2fr 1fr → la columna central es el doble de ancha
   - Total: 4fr (1+2+1), columna central ocupa 2/4 = 50%
   ======================================== */
.grid-fracciones {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr; /* Columna central doble */
  gap: 10px;
}

.grid-fracciones .item:nth-child(2) {
  background-color: #e74c3c; /* Resaltar la columna doble */
}


/* ========================================
   EJERCICIO 3: Gap (espaciado)
   - gap: 20px → espacio entre filas y columnas
   - column-gap: solo horizontal
   - row-gap: solo vertical
   ======================================== */
.grid-gap {
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* 2 columnas iguales */
  gap: 20px; /* 20px de separación */
}


/* ========================================
   EJERCICIO 4: grid-column (ocupar columnas)
   - grid-column: 1 / 3 → desde línea 1 hasta línea 3 (ocupa 2 columnas)
   - También se puede usar: grid-column: span 2 (ocupar 2 columnas)
   ======================================== */
.grid-column {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 columnas */
  gap: 10px;
}

.span-2 {
  grid-column: 1 / 3; /* Ocupa desde la línea 1 hasta la 3 (2 columnas) */
  background-color: #27ae60;
}


/* ========================================
   EJERCICIO 5: grid-row (ocupar filas)
   - grid-row: 1 / 3 → desde línea 1 hasta línea 3 (ocupa 2 filas)
   - También: grid-row: span 2
   ======================================== */
.grid-row {
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* 2 columnas */
  gap: 10px;
}

.span-row {
  grid-row: 1 / 3; /* Ocupa 2 filas */
  background-color: #9b59b6;
}


/* ========================================
   EJERCICIO 6: Posicionamiento exacto
   - Usar líneas para posicionar elementos exactamente
   - grid-column: inicio / fin
   - grid-row: inicio / fin
   ======================================== */
.grid-posicion {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 columnas */
  grid-template-rows: repeat(2, 100px); /* 2 filas de 100px */
  gap: 10px;
}

.pos-1 {
  grid-column: 1 / 3; /* Columnas 1-2 */
  grid-row: 1 / 2; /* Fila 1 */
  background-color: #e74c3c;
}

.pos-2 {
  grid-column: 3 / 4; /* Columna 3 */
  grid-row: 1 / 3; /* Filas 1-2 */
  background-color: #27ae60;
}

.pos-3 {
  grid-column: 1 / 2; /* Columna 1 */
  grid-row: 2 / 3; /* Fila 2 */
  background-color: #f39c12;
}

.pos-4 {
  grid-column: 2 / 3; /* Columna 2 */
  grid-row: 2 / 3; /* Fila 2 */
  background-color: #9b59b6;
}


/* ========================================
   EJERCICIO 7: repeat()
   - repeat(6, 1fr) = 1fr 1fr 1fr 1fr 1fr 1fr
   - Evita repetir el mismo valor muchas veces
   ======================================== */
.grid-repeat {
  display: grid;
  grid-template-columns: repeat(6, 1fr); /* 6 columnas iguales */
  gap: 10px;
}


/* ========================================
   EJERCICIO 8: auto-fit + minmax (RESPONSIVE)
   - auto-fit: crea tantas columnas como quepan
   - minmax(200px, 1fr): mínimo 200px, máximo 1fr
   - Se ajusta automáticamente sin media queries
   ======================================== */
.grid-autofit {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
}


/* ========================================
   EJERCICIO 9: grid-template-areas
   - Define áreas con nombres
   - Muy visual y fácil de entender
   - El punto (.) representa una celda vacía
   ======================================== */
.grid-areas {
  display: grid;
  grid-template-columns: 1fr 3fr; /* Sidebar pequeño, main grande */
  grid-template-rows: auto 1fr auto; /* Header auto, main crece, footer auto */
  gap: 10px;
  grid-template-areas:
    "header header"    /* Header ocupa las 2 columnas */
    "sidebar main"     /* Sidebar y Main en la misma fila */
    "footer footer";   /* Footer ocupa las 2 columnas */
  min-height: 300px;
}

.area-header {
  grid-area: header; /* Se coloca en el área "header" */
  background-color: #34495e;
}

.area-sidebar {
  grid-area: sidebar;
  background-color: #95a5a6;
}

.area-main {
  grid-area: main;
  background-color: #3498db;
}

.area-footer {
  grid-area: footer;
  background-color: #2c3e50;
}


/* ========================================
   EJERCICIO 10: Grid complejo
   - Combinación de grid-column, grid-row y posicionamiento
   ======================================== */
.grid-complejo {
  display: grid;
  grid-template-columns: repeat(4, 1fr); /* 4 columnas */
  grid-template-rows: repeat(3, 80px); /* 3 filas de 80px */
  gap: 10px;
}

.complejo-1 {
  grid-column: 1 / 3; /* Ocupa 2 columnas */
  grid-row: 1 / 3; /* Ocupa 2 filas */
  background-color: #e74c3c;
}

.complejo-2 {
  grid-column: 3 / 4;
  background-color: #3498db;
}

.complejo-3 {
  grid-column: 4 / 5;
  background-color: #27ae60;
}

.complejo-4 {
  grid-column: 3 / 5; /* Ocupa 2 columnas */
  background-color: #f39c12;
}

.complejo-5 {
  background-color: #9b59b6;
}

.complejo-6 {
  grid-column: 2 / 5;
  background-color: #1abc9c;
}


/* ========================================
   EJERCICIO 11: Alineación de items
   - justify-items: alineación horizontal (start, center, end)
   - align-items: alineación vertical (start, center, end)
   - Por defecto, los items se estiran (stretch)
   ======================================== */
.grid-alineacion {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 150px); /* Celdas grandes */
  gap: 10px;
  justify-items: center; /* Centra horizontalmente */
  align-items: center; /* Centra verticalmente */
  border: 2px dashed #333;
}

.item-pequeño {
  background-color: #e74c3c;
  color: white;
  padding: 20px;
  font-weight: bold;
  border-radius: 4px;
  /* No tiene width/height fijo, solo padding */
}


/* ========================================
   EJERCICIO 12: Grid responsive con media queries
   - Mobile first: 1 columna
   - Tablet: 2 columnas
   - Desktop: 3 columnas
   ======================================== */
.grid-responsive {
  display: grid;
  grid-template-columns: 1fr; /* Móvil: 1 columna */
  gap: 15px;
}

/* Tablet: 2 columnas */
@media only screen and (min-width: 481px) and (max-width: 768px) {
  .grid-responsive {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Desktop: 3 columnas */
@media only screen and (min-width: 769px) {
  .grid-responsive {
    grid-template-columns: repeat(3, 1fr);
  }
}


/* ========================================
   RESUMEN CSS GRID

   CONTENEDOR (display: grid):
   - grid-template-columns: 1fr 2fr 1fr    → Define columnas
   - grid-template-rows: 100px auto        → Define filas
   - gap: 20px                             → Espacio entre celdas
   - repeat(3, 1fr)                        → Repetir patrón
   - repeat(auto-fit, minmax(200px, 1fr))  → Responsive automático
   - grid-template-areas: "header header"  → Áreas con nombres
   - justify-items: center                 → Alineación horizontal
   - align-items: center                   → Alineación vertical

   ITEMS (elementos hijos):
   - grid-column: 1 / 3                    → Ocupa columnas 1-2
   - grid-column: span 2                   → Ocupa 2 columnas
   - grid-row: 1 / 3                       → Ocupa filas 1-2
   - grid-area: header                     → Se coloca en área nombrada
   - justify-self: center                  → Alineación horizontal individual
   - align-self: center                    → Alineación vertical individual

   UNIDADES:
   - fr (fracción)                         → Espacio flexible
   - px, rem, %                            → Tamaños fijos/relativos
   - auto                                  → Según contenido
   - minmax(200px, 1fr)                    → Mínimo y máximo

   DIFERENCIA CON FLEXBOX:
   - Grid: diseño en 2 dimensiones (filas Y columnas)
   - Flexbox: diseño en 1 dimensión (fila O columna)
   ======================================== */
